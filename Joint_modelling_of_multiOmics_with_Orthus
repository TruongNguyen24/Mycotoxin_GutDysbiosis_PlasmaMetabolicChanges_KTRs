microbe # Scaled microbiome data ( samples (rows) x species (columns): row sums are equal to 1))
metab # Scaled metabolomics data
metadata_surv # phenotype data

f <- c("sex", "age", "BMI" ,"KREA_BLO", "dum_calcineurin.inh", "dum_antibiotics","dum_ppi")

f <- reformulate(termlabels=f)
X <- t(model.matrix(f, data=metadata_surv))

X

Y <- microbe
Y <- driver::miniclo(Y)
Y <- as.matrix(zCompositions::cmultRepl(Y, label=0, method="CZM", z.delete = F))
       
Z <- metab
Z <- driver::miniclo(Z)
Z <- as.matrix(zCompositions::cmultRepl(Z, label=0, method="CZM", z.delete = F))
dim(Z)    

eta_init <- t(driver::alr(Y))
rownames(eta_init) <- colnames(Y)[-length(colnames(Y))]
Z_init <- t(driver::clr(Z)) 
    
eta_init_array <- array(eta_init, dim=c(nrow(eta_init), ncol(eta_init), 1000))
    
eta_Z <- t(cbind(t(eta_init), t(Z_init)))
    
eta_Z_array <- array(eta_Z, dim=c(nrow(eta_Z), ncol(eta_Z), 1000))
dimnames(eta_Z_array)[[1]] <- c(colnames(Y)[-length(colnames(Y))], colnames(Z))
dimnames(eta_Z_array)[[2]] <-  rownames(Y)
    
N <- ncol(t(Y))
P <- nrow(t(Z))
Q <- nrow(X)
D <- nrow(t(Y)) 
    
upsilon <- (D-1+P)+10
Xi <- diag(D-1+P)
GG <- cbind(diag(D-1), -1)
Xi[1:(D-1), 1:(D-1)] <- GG%*%diag(D) %*% t(GG)
Xi <- Xi * (upsilon-D-P) 
Gamma <- diag(Q)
Theta <- matrix(0, D-1+P, Q)
    
priors <- pibble(NULL, X, upsilon, Theta, Gamma, Xi, n_samples=1000)

posterior <- uncollapsePibble(eta=eta_Z_array, X=priors$X, Theta=priors$Theta, Gamma=priors$Gamma, Xi=priors$Xi, upsilon=priors$upsilon, seed=2849)
    
posterior2 <- 
        orthusfit(
        D=D,
        N=N,
        P=P,
        Q=Q,
        coord_system="alr",
        iter=1000L,
        alr_base=D,
        Z=t(Z),
        Y=t(Y),
        Eta=eta_init_array,
        Lambda=posterior$Lambda,
        Sigma=posterior$Sigma,
        X=X,
        names_covariates=rownames(X),
        names_Zdimensions=rownames(t(Z)),
        names_categories=rownames(t(Y)),
        names_samples=colnames(t(Y))
      )
    
posterior_clr_orthus <- to_clr(posterior2)
    
    # Attached dimnames
dimnames(posterior_clr_orthus$Lambda)[[2]] <- rownames(X)
dimnames(posterior_clr_orthus$Lambda)[[1]] <- c(colnames(Y), colnames(Z))
dimnames(posterior_clr_orthus$Sigma)[[1]] <- dimnames(posterior_clr_orthus$Sigma)[[2]] <- c(colnames(Y), colnames(Z))

xcor <- posterior_clr_orthus$Sigma[1:D, (D+1):(D+P),]

# Initial preprocessing to speed up computation of posterior intervals
# As there are a lot of cross-covariance terms we are going to first 
# weed down the list of things we have to look at by first pass 
# selecting only those taxa that have a large posterior mean for the covariance
xcor.mean <- apply(xcor, c(1,2), mean)
xcor.mean

to.analyze <- fido::gather_array(xcor.mean, cov, taxa, metabolite) %>% 
  arrange(-abs(cov)) %>% 
  .[1:1000,] %>% 
  mutate(tm =paste0(taxa, "_", metabolite))
to.analyze

# Subset Covariance to those we are interested in and calculate posterior 
# confidence intervals. 

xcor.summary <- fido::gather_array(xcor, cov, taxa, metabolite, iter) %>%
  mutate(tm=paste0(taxa, "_", metabolite)) %>% 
  filter(tm %in% to.analyze$tm) %>% 
  mutate(taxa = colnames(Y)[taxa], metabolite = colnames(Z)[metabolite]) %>% 
  group_by(taxa, metabolite) %>% 
  summarise(
    mean   = mean(cov),
    p2.5   = quantile(cov, 0.025),
    p5     = quantile(cov, 0.05),
    p10    = quantile(cov, 0.10),
    p25    = quantile(cov, 0.25),
    p50    = quantile(cov, 0.50),
    p75    = quantile(cov, 0.75),
    p90    = quantile(cov, 0.90),
    p95    = quantile(cov, 0.95),
    p97.5  = quantile(cov, 0.975),
    .groups = "drop"
  ) %>% 
  arrange(mean)

xcor.summary 

# Select those covariances where the model has high certainty (95%) that
# the true covariance is not zero. 
taxa_metab <- xcor.summary %>% 
  filter(sign(p2.5)==sign(p97.5)) %>%
  filter(abs(mean) > 1)
